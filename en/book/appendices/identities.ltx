\ch{Identities, theorems, and the like}\label{appendix-d}

This appendix just lists identities, theorems, and stuff like that. It's for
reference, not for reading.

\s{Equality}\label{d-equality}

\ss{Properties}

\begin{description}
  \item[Reflexive property] $a \equiv a$
  \item[Commutative property] $\parens{a = b} \iff \parens{b = a} \sfall a,b$
  \item[Transitive property] $\parens{a = b} \land \parens{b = c} \implies \parens{a = c} \sfall a,b,c$
\end{description}

\ss{Notation}

\begin{description}
\item[$=$] $a = b$ means that $a$ and $b$ are the same thing.
\item[$\equiv$] $a \equiv b$ means that $a=b$, for all $a$ and $b$. $a \equiv b$
  should be read ``$a$ is identically equivalent to $b$''.
\item[$\ce$] $a \ce b$ means that $a$ is defined to be equal to $b$. In
  practice, this is the same as $\equiv$, but is semantically different.
\end{description}

\s{Implications}\label{d-implications}

\begin{description}
  \item[Reflexive property] $a \implies a \sfall a$
  \item[Transitive property] $\parens{a \implies b} \land \parens{b \implies c} \implies \parens{a \implies c} \sfall a,b,c$
  \item[Negation] $\parens{a \implies b} \iff \parens{\lnot a \impliedby \lnot b} \sfall a,b$
\end{description}

\s{Booleans}\label{d-booleans}

\nocite{w-boolean-algebra}

\begin{description}
\item[Definition] A \term{Boolean} is a value of either true or false. The study
  of Booleans is called \term{Boolean algebra}. The rules for Booleans also work
  for propositions. The set of Booleans is often referred to as $\bool = \mset{\true,\false}$
\item[Logical-and] $a \land b$ is pronounced ``$a$ logical-and $b$''. It is true
  iff $a$ and $b$ are both true.
  \[ \land : \bool \to \bool \to \bool \]
\item[Logical-or] $a \lor b$ is pronounced ``$a$ logical-or $b$''. It is true if
  one or more of $a$ and $b$ are true.
  \[ \lor : \bool \to \bool \to \bool \]
\item[Logical-not] $\lnot a$ is pronounced ``logical-not $a$''. $\lnot$ takes
  true to false, and false to true.
  \[ \lnot : \bool \to \bool \]
\item[Cancellative property] $\lnot \circ \lnot \equiv \id$
\item[Nomenclature] Booleans are named after George Boole, who was the first to
  study them to any extent.
\end{description}

\ss{Logical-and}\label{d-booleans-land}

\begin{description}
  \item[Reflexive property] $a \land a \equiv a$
  \item[Associative property] $a \land \parens{b \land c} \equiv \parens{a \land b} \land c$
  \item[Commutative property] $a \land b \equiv b \land a$
  \item[Distributive property] $a \land \parens{b \lor c} \equiv \parens{a \land b} \lor \parens{b \land c}$
\end{description}

\ss{Logical-or}\label{d-booleans-lor}

\begin{description}
  \item[Reflexive property] $a \lor a \equiv a$
  \item[Associative property] $a \lor \parens{b \lor c} \equiv \parens{a \lor b} \lor c$
  \item[Commutative property] $a \lor b \equiv b \lor a$
  \item[Distributive property] $a \lor \parens{b \land c} \equiv \parens{a \lor b} \land \parens{b \lor c}$

    This is a consequence of the distributive property mentioned in
    \cref{d-booleans-and}, DeMorgan's first law, and the cancellative property.

    \begin{proof}
      Start with the first property

      \begin{displaymath}
        a \land \parens{b \lor c} \equiv \parens{a \land b} \lor \parens{b \land c}
      \end{displaymath}

      Apply $\lnot$ to both sides

      \begin{displaymath}
        \lnot\parens{a \land \parens{b \lor c}} \equiv \lnot\parens{\parens{a \land b} \lor \parens{b \land c}}
      \end{displaymath}

      Apply DeMorgan's laws

      \begin{displaymath}
        \lnot a \lor \lnot\parens{b \lor c} \equiv \lnot\parens{a \land b} \land \lnot\parens{b \land c}
      \end{displaymath}

      Do it again

      \begin{displaymath}
        \lnot a \lor \parens{\lnot b \land \lnot c} \equiv \parens{\lnot a \lor \lnot b} \land \parens{\lnot b \lor \lnot c}
      \end{displaymath}

      Let $p,q,r = \lnot a, \lnot b, \lnot c$, respectively.

      \begin{displaymath}
        p \lor \parens{q \land r} \equiv \parens{p \lor q} \land \parens{q \lor r}
      \end{displaymath}
    \end{proof}

\end{description}

\ss{De Morgan's Laws}\label{d-booleans-demorgan}

\begin{description}
  \item[De Morgan's first law] $\lnot\parens{a \land b} \equiv \lnot a \lor \lnot b$
  \item[Derived law] $\lnot\parens{a \lor b} \equiv \lnot a \land \lnot b$
    \begin{proof}
      Start with the first law

      \[ \lnot\parens{a \land b} \equiv \lnot a \lor \lnot b \]

      Let $p = \lnot a$, $q = \lnot b$

      \[ p \lor q \equiv \lnot\parens{\lnot p \land \lnot q} \]

      Apply $\lnot$ to both sides of $\equiv$

      \[ \lnot\parens{p \lor q} \equiv {\lnot p \land \lnot q} \]
    \end{proof}
\end{description}

\s{Sets}\label{d-sets}

\ss{Definitions}\label{d-set-definitions}

\begin{description}
  \item[Unions] $a \cup b \ce \mset{x \in \amb \semic x \in a \lor x \in b}$
  \item[Intersects] $a \cap b \ce \mset{x \in a \semic x \in b}$
  \item[Set subtraction (or relative complement)] $a \bs b \ce \mset{x \in a \semic x \notin b}$
  \item[Complement (sometimes absolute complement)] $a^c \ce \mset{x \in \amb \semic x \notin a}$
\end{description}

\ss{Identities}\label{d-set-identities}

\sss{Unions}\label{d-unions}

\begin{description}
  \item[Reflexive property] $a \union a \equiv a$
  \item[Associative property] $a \union \parens{b \union c} \equiv \parens{a \union b} \union c$
  \item[Commutative property] $a \union b \equiv b \union a$
\end{description}

\sss{Intersects}\label{d-interects}

\begin{description}
  \item[Reflexive property] $a \intersect a \equiv a$
  \item[Associative property] $a \intersect \parens{b \intersect c} \equiv \parens{a \intersect b} \intersect c$
  \item[Commutative property] $a \intersect b \equiv b \intersect a$
\end{description}

\sss{Set subtraction}\label{d-set-subtraction}

\begin{itemize}
\item $A \bs \parens{B \cap C} \equiv \parens{A \bs B} \union \parens{A \bs C}$
\item $A \bs \parens{B \union C} \equiv \parens{A \bs B} \intersect \parens{A \bs C}$
\item $A \bs \parens{B \bs C} \equiv \parens{A \bs B} \union \parens{A \intersect C}$
\item $\parens{A \bs B} \intersect C \equiv \parens{A \cap C} \bs B \equiv A \intersect \parens{C \bs B}$
\item $\parens{A \bs B} \union C \equiv \parens{A \union C} \bs \parens{B \bs C}$
\item $A \bs A \equiv \nil$
\item $A \bs \nil \equiv A$
\item $\nil \bs A \equiv \nil$
\end{itemize}

\s{Functions}\label{d-functions}

\ss{Vocabulary}

\begin{description}
\item[Function] A mathematical construct mapping an input to an output.
\item[Referential transparency] $a = b \implies \evalat{f}{a} =
  \evalat{f}{b}$. All functions are referentially transparent.
\item[Domain] If $f : A \to B$, then $A$ is the \term{domain} of $f$.
\item[Codomain] If $f : A \to B$, then $B$ is the \term{codomain} of $f$.
\item[Image] $\im{f} \ce \mset{\evalat{f}{x} \in B\semic x \in A}$
\item[Injectivity] $\notexists \mvec{a,b} \semic a,b \in A \land a \ne b \land \evalat{f}{a} = \evalat{f}{b}$
\item[Surjectivity] $\codom{f} = \im{f}$
\item[Bijectivity] A function is \term{bijective} if it is both injective and surjective.
\item[Invertibility] A function is invertible iff it is bijective. The inverse of $f$ is $\arc{f}$
\item[Preimage] $\mathrm{preim} \ce \mathbf{codom} \circ \mathrm{arc}$
\item[Argument] The specific input values to a function.
\item[Signature] If $f : A \to B$ is a function, then $A \to B$ is its
  signature.
\end{description}

\ss{Notation}

\begin{description}
\item[: notation] $f : A \to B$ means that $f$ takes an item from $A$, and outputs an item
  to $B$, where $A$ and $B$ are types.
\item[Currying] Taking a function of multiple arguments, and transforming it
  into a chain of functions each taking one argument.

  Normal signature
  
  $+ : \mvec{\C,\C} \to \C$

  Curried signature:
  
  $+ : \C \to \C \to \C$

  This doesn't change the behavior of the function, only the semantics.

  Likewise, \term{uncurrying} is to undo the currying.
\item[Composition] We can smush two functions together with $\of$:
  \begin{alignedmath}
    \of : \parens{b \to c} \to \parens{a \to b} \to a \to c \\
    \evalat{\parens{f \of g}}{x} \ce \evalat{f}{\evalat{g}{x}} \\
  \end{alignedmath}
\end{description}

\s{Lambda calculus}\label{d-lambda-calculus}

\nocite{hs-lambda,hs-alpha,hs-beta,hs-eta,hs-lambda-abs}

\begin{description}
\item[$\lambda$ abstraction] A way to write a function: $\ld{x,y} x + y$
\item[$\alpha$ conversion] Changing the names of the arguments. For instance,
  you can write the above function as

  \[ \ld{a,b} a + b \]

\item[$\beta$ reduction] Partially calculating a result. For instance

  \[ \ld{2,y} 2 + y \]

  Can be $\beta$ reduced to 

  \[ \ld{y} 2 + y \]

\item[$\eta$ conversion] Removing or adding extraneous free arguments. The last
  function

  \[ \ld{2,y} 2 + y \]

  Can be $\eta$ \xti{reduced} to

  \[ 2 + \]

  Which could then be $\eta$ \xti{abstracted} to 

  \[ \ld{2,\kappa} 2 + \kappa \]
\end{description}

\s{Greek alphabet}\label{d-greek-alphabet}

\nocite{w-greek-alphabet}

\begin{tabu}{|c|c|c|}\hline
  \xtb{Letter} & \xtb{Pronounciation} & \xtb{Rough latin equivalent} \\ \hline
  A, $\alpha$ & Alpha & A \\ \hline
  B, $\beta$ & Beta & B \\ \hline
  $\Gamma, \gamma$ & Gamma & G \\ \hline
  $\Delta, \delta$ & Delta & D \\ \hline
  E, $\epsilon$ & Epsilon & E \\ \hline
  Z, $\zeta$ & Zeta & Z \\ \hline
  H, $\eta$ & Eta & Eh, j\xtb{e}t \\ \hline
  $\Theta, \theta$ & Theta & Th \\ \hline
  I, $\iota$ & Iota & I \\ \hline
  K, $\kappa$ & Kappa & K \\ \hline
  $\Lambda, \lambda$ & Lambda & L \\ \hline
  M, $\mu$ & Mu & M \\ \hline
  N, $\nu$ & Nu & N \\ \hline
  $\Xi, \xi$ & Xi & Ks, du\xtb{cks} \\ \hline
  O, o & Omicron & Oh, \xtb{oa}t \\ \hline
  $\Pi, \pi$ & Pi & P \\ \hline
  P, $\rho$ & Rho & R \\ \hline
  $\Sigma, \sigma$ & Sigma & S \\ \hline
  T, $\tau$ & Tau & T \\ \hline
  $\Upsilon, \upsilon$ & Upsilon & U \\ \hline
  $\Phi, \phi$ & Phi & F \\ \hline
  X, $\chi$ & Chi & Ch, \xtb{ch}icken \\ \hline
  $\Psi, \psi$ & Psi & Ps, cu\xtb{ps} \\ \hline
  $\Omega, \omega$ & Omega & O, b\xtb{o}ss \\ \hline
\end{tabu}