\ch{More stuff about sets (and functions)}
\label{ch:more-sets}

By now, you hopefully have some idea into the basic intuition behind sets and
functions. Moreover, you've proven some cool stuff about them -- for instance,
you proved that a function is invertible iff it is bijective.

That's kind of cool, right? It's much easier to verify that a function is
bijective than it is to find its inverse. So, right off the bat, you can see if
a function is invertible without trying to invert it. Despite what you may
think, a common problem in math is to find inverse functions.

Speaking of functions, I'm going to define a really simple function:

\begin{alignedmath}
  \id : a \to a \\
  \evalat{\id}{x} = x
\end{alignedmath}

That function is about as simple as functions get. It's not a very interesting
function, but it's handy when defining things.

This is a slightly less simple function, but nonetheless important

\begin{alignedmath}
  \flip : \parens{a \to b \to c} \to b \to a \to c \\
  \eva{\flip}{f, x, y} = \eva{f}{y,x}
\end{alignedmath}

It takes a function, $f$, which takes an $a$ and a $b$, and then returns another
function with the arguments flipped. You won't usually see
$\eva{\flip}{\ld{x, y} x-y, 3, 5}$ floating around. Instead

\begin{alignmath}{rcl}
  f & : & p \to q \to r \\
  \eva{\flip}{f} & : & q \to p \to r \\
\end{alignmath}

Here's an infix operator:

\begin{alignedmath}
  \circ : \parens{b \to c} \to \parens{a \to b} \to a \to c \\
  \eva{\parens{f \circ g}}{x} = \eva{f}{\eva{g}{x}}
\end{alignedmath}

We're going to look at some more stuff with sets.

\s{Set subtraction}

First off, we have ``set subtraction''. This is sometimes called the ``relative
complement''.

\[ P \setminus Q = \mset{x \in P \semic x \notin Q} \]

$P \bs Q$ is all of the elements in $P$ that are not in $Q$.

\begin{figure}[ht]
  \centering
  \inclgraph{setminus.png}
  \caption{Set subtraction}
  \label{fig:setminus}
\end{figure}

What would $P \bs P$ be, then? Well, $\nil$, of course, right! 

\[ P \setminus P = \mset{x \in P \semic x \notin P} = \nil \]

Well, that looks like a contradiction, doesn't it? Well, sort of. It's a
contradiction if you assume that $P$ is nonempty --- if you assume that there is
some element in $P$ --- if an element is both in $P$ and not in $P$, that would
be madness! But, if you realize that the comprehension is the ``set of objects
satisfying the condition'', then you don't encounter a contradiction.
$P \setminus P$ is the set of all objects in $P$ that are not in $P$: there are
no elements satisfying this condition, thus $P \bs P \equiv \nil$.

\Cref{fig:setminus} explains this idea graphically.

\ss{Complement}

If $P \subof \amb$, then $\amb \setminus P$ is called the ``\term{complement} of
$P$ with respect to $\amb$''. Yes, that's compl\xti{e}ment with an 'e', not
compl\xti{i}ment, with an 'i'. 

I drew another diagram to illustrate the complement in \cref{fig:complement}.

\begin{figure}[ht]
  \centering
  \inclgraph{venn-complement-2.png}
  \caption{The complement, illustrated graphically. I tried to draw an $\amb$ in
    the upper right corner. It turned out terribly.}
  \label{fig:complement}
\end{figure}

In these exercises, you are going to prove every identity there is about sets.

\begin{ExcList}
  \Exercise{$A \bs \parens{B \cap C} \equiv \parens{A \bs B} \union \parens{A \bs C}$}
  \Exercise {$A \bs \parens{B \union C} \equiv \parens{A \bs B} \intersect \parens{A \bs C}$}
  \Exercise {$A \bs \parens{B \bs C} \equiv \parens{A \bs B} \union \parens{A \intersect C}$}
  \Exercise {$\parens{A \bs B} \intersect C \equiv \parens{A \cap C} \bs B \equiv A \intersect \parens{C \bs B}$}
  \Exercise {$\parens{A \bs B} \union C \equiv \parens{A \union C} \bs \parens{B \bs C}$}
  \Exercise {$A \bs A \equiv \nil$}
  \Exercise {$A \bs \nil \equiv A$}
  \Exercise {$\nil \bs A \equiv \nil$}
  \Exercise {$A \cap \parens{B \cup C} \equiv \parens{A \cap B} \cup \parens{A \cap C}$}
  \Exercise {$A \cup \parens{B \cap C} \equiv \parens{A \cup B} \cap \parens{A \cup C}$}
  \Exercise {$\parens{A^c}^c \equiv A$}
  \Exercise{\nm{\parens{A \cap B}^c \equiv A^c \cup B^c}} 
  \Exercise{\nm{\parens{A \union B}^c \equiv A^c \cap B^c}}
\end{ExcList}

\s{Cartesian products}

The next thing we need to go over is a \term{Cartesian product} - it's basically
a way to double up on a set. So, say we have a set $A$, and another set $B$, the
Cartesian product is the set of all 2-vectors, where the first element is from
$A$, and the second element is from $B$.

\begin{alignedmath}
  \times : \Setof{a} \to \Setof{b} \to \Classof{a,b} \\
  A \times B \ce \mset{\mvec{x,y} \st x \in A \land y \in B} \\
\end{alignedmath}

It's the class of all pairs of the elements in either set. It is actually a set,
too, but I haven't taught you enough to prove that. I also haven't taught you
what a class is. So, for the time being, know that the Cartesian product
produces a set, but at the same time you don't know that.

Let's see some examples!

\begin{alignmath}{rccl}
  \mset{1,2,3} \times \mset{4,5,6}
    & = & \{ & \mvec{1,4} \\
    &   &  , & \mvec{1,5} \\
    &   &  , & \mvec{1,6} \\
    &   &  , & \mvec{2,4} \\
    &   &  , & \mvec{2,5} \\
    &   &  , & \mvec{2,6} \\
    &   &  , & \mvec{3,4} \\
    &   &  , & \mvec{3,5} \\
    &   &  , & \mvec{3,6} \\
    &   & \} &            \\
\end{alignmath}

Alright, remember earlier when I told you to install Haskell? Well, if you
didn't, do it now: \cref{intro-idris}.

\begin{plainfile}
% ghci
GHCi, version 7.8.4: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> 
\end{plainfile}

GHCi is the Glasgow Haskell Compiler, interactive. It's an interactive
interpreter for Haskell.

If you want to change your prompt to something other than \code{Prelude>}, then
write something like this:

\begin{plainfile}
Prelude> :set prompt "ghci: "
ghci: 
\end{plainfile}

If you want to do this permanently, add \code{:set prompt "ghci: "} to
\filepath{\tilde /.ghc/ghci.conf}.

I didn't just have you open up GHCi for no good reason. It's really easy to play
with these Cartesian products in GHCi. This way, you can experiment.

Remember the definition of the Cartesian product:

\begin{displaymath}
  A \times B \ce \mset{\mvec{x,y} \st x \in A \land y \in B}
\end{displaymath}

Let's try that example out. Math doesn't directly translate into Haskell. Some
of the syntax is a bit different.

\begin{haskell}
ghci: [(a,b) | a <- [1,2,3], b <- [4,5,6]]
[(1,4),(1,5),(1,6),(2,4),(2,5),(2,6),(3,4),(3,5),(3,6)]
it :: (Num t1, Num t) => [(t, t1)]
\end{haskell}

% \newcommand{ghciconf}{\filepath{\tilde /.ghc/ghci.conf}}

That last line probably doesn't show up for you. It's just telling us the type
of our expression. To have it show up automatically for you, run \code{:set +t},
or add it to \filepath{\tilde /.ghc/ghci.conf}.

There are a number of ways to actually work out the mechanics of the
product. The simplest, and easiest way, is through \xti{recursion}. So, let's go
over the mechanics of $\mset{1,2,3} \times \mset{4,5,6}$. You take the first
element of the first set, in this case, $1$, and take the Cartesian product of
$\mset{1}$ and $\mset{4,5,6}$:

\[
\mset{1} \times \mset{4,5,6} =
\mset{
  \mvec{1,4},
  \mvec{1,5},
  \mvec{1,6}
}
\]

That's unreadable

\begin{alignmath}{rccc}
  \mset{1} \times \mset{4,5,6} & = & \{ & \mvec{1,4} \\
                               &   &  , & \mvec{1,5} \\
                               &   &  , & \mvec{1,6} \\
                               &   & \} &
\end{alignmath}

Pretty easy. Then you do the same thing with the second element.

\begin{alignmath}{rccc}
  \mset{2} \times \mset{4,5,6} & = & \{ & \mvec{2,4} \\
                               &   &  , & \mvec{2,5} \\
                               &   &  , & \mvec{2,6} \\
                               &   & \} &
\end{alignmath}

You guessed it!

\begin{alignmath}{rccc}
  \mset{3} \times \mset{4,5,6} & = & \{ & \mvec{3,4} \\
                               &   &  , & \mvec{3,5} \\
                               &   &  , & \mvec{3,6} \\
                               &   & \} &
\end{alignmath}

Then you take the union:
\newcommand{\unionformatted}[1]{\begin{array}{cc}
    \{ & \mvec{{#1},4} \\
     , & \mvec{{#1},5} \\                                                                                       
     , & \mvec{{#1},6} \\                                                                                       
    \} &               \\
  \end{array}}

\begin{alignmath}{rcccc}
  \mset{1,2,3} \times \mset{4,5,6} & = & \bigcup & \{ & \mset{1} \times \mset{4,5,6}, \\
                                   &   &         &  , & \mset{2} \times \mset{4,5,6}, \\
                                   &   &         &  , & \mset{3} \times \mset{4,5,6}, \\
                                   &   &         & \} & \\
\end{alignmath}

I'm going to have to display the intermediate result in a separate thing,
because it's just awful if I try to smush it in with the rest:

\begin{displaymath}
\unionformatted{1} \bigcup
\unionformatted{2} \bigcup
\unionformatted{3}
\end{displaymath}

Which evaluates to

\begin{alignmath}{rccl}
  \mset{1,2,3} \times \mset{4,5,6}
    & = & \{ & \mvec{1,4} \\
    &   &  , & \mvec{1,5} \\
    &   &  , & \mvec{1,6} \\
    &   &  , & \mvec{2,4} \\
    &   &  , & \mvec{2,5} \\
    &   &  , & \mvec{2,6} \\
    &   &  , & \mvec{3,4} \\
    &   &  , & \mvec{3,5} \\
    &   &  , & \mvec{3,6} \\
    &   & \} &            \\
\end{alignmath}

Okay, great. I hope you understand this so far. What happens when we take the
product of a set with itself?


\begin{alignmath}{rccl}
  \mset{1,2,3} \times \mset{1,2,3}
    & = & \{ & \mvec{1,1} \\
    &   &  , & \mvec{1,2} \\
    &   &  , & \mvec{1,3} \\
    &   &  , & \mvec{2,1} \\
    &   &  , & \mvec{2,2} \\
    &   &  , & \mvec{2,3} \\
    &   &  , & \mvec{3,1} \\
    &   &  , & \mvec{3,2} \\
    &   &  , & \mvec{3,3} \\
    &   & \} &            \\
\end{alignmath}

The Cartesian product of a set $A$ with itself is usually denoted $A^2$ instead
of $A \times A$. Like I said, we like to be lazy.
