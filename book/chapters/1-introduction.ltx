\ch{Вступление}

Прежде чем заскучать от кучи хлама до которого вам нет дела, давайте немного
поговорим о математике?

Есть всего три основных понятия, с которыми вы должны быть знакомы,
чтобы делать что-либо интересное в математике. Это {\it сеты}, {\it функции} и {\it доказательства}.
К несчастью, чтобы понимать одно из них, вы должны быть знакомы с
оставшимися.\footnote{Вы поймете далее, что когда математики используют понятие
  типа {\it сет}, {\it функция}, {\it доказательство}, {\it группа}, {\it непрерывный} или
  {\it замкнутый}, они обычно имеют ввиду что-то, похожее по смыслу на общепринятое
  значение понятия, но с дополнениями. Это обычное дело для науки (например, \xti{теория},
  \xti{гипотеза}, \xti{эксперимент}).}
% ENG
% There are basically three notions with which you need to be familiar in order to
% do anything interesting in math. Those three things are {\it sets}, {\it
%   functions}, and {\it proofs}. Unfortunately, to be familiar with one, you have
% to be familiar with the other two.\footnote{You'll learn as we go along, when
%   math people use a common term like {\it set}, {\it function}, {\it proof},
%   {\it group}, {\it continuous} or {\it closed}, they usually mean something
%   similar in concept to the colloquial term, but there are some strings
%   attached. This is usually the case in the sciences too (e.g. \xti{theory},
%   \xti{hypothesis}, \xti{experiment}).}

Итак, что означает каждое из этих понятий?
% ENG
% So, what are each of those things?

\begin{itemize}
\item \xti{Сет} – это неупорядоченая коллекция чего-либо. Кроме того без повторений.
  Например, $\mset{2, 5}$ – то же самое, что $\mset{5, 2}$ (потому что порядок не важен).
  $\mset{2, 5, 5}$ будет тем же самым сетом, потому что там нет понятия многочисленности.
% ENG
% \item A \xti{set} is an unordered collection of things. There is also no
%   repetition. For instance, $\mset{2, 5}$ is the same as $\mset{5, 2}$ (because
%   order doesn't matter). $\mset{2, 5, 5}$ would be the same set, because there's
%   no notion of multiplicity.

\item \xti{Функция} – это математическая конструкция (что очевидно, раз мы говорим об этом).
  По сути, она принимает какие-то данные на вход, производит действия над ними и возвращает результат.
  Если вы даете функции одни и те же данные на вход несколько раз, каждый раз
  вы должны получать один и тот же результат на выходе. Это называется "чистотой".
  Если функция не чистая, значит это не функция. Это что-то другое.
% ENG
% \item A \xti{function} is a mathematical construct (well, obviously, else I
%   wouldn't be talking about it). Basically, it takes some input, does something
%   to it, and spits out some output. If you give the function the same input a
%   bunch of times, you should get the same result each time. This concept is
%   called ``referential transparency.'' If the function is not referentially
%   transparent, then it's not a function. It's something else.

\item \xti{Доказательство} – это когда вы берете кучу простых фактов,
  называемых \xti{аксиомами}, и связываете их вместе, чтобы вывести \xti{теоремы}.
  Что-то вроде пазла, который вы собираете из маленьких кусочков, чтобы сформировать картину.
%ENG
% \item A \xti{proof} is basically where you take a bunch of simple facts, called
%   \xti{axioms}, and chain them together to make \xti{theorem}s. It's sort of like
%   sticking puzzle pieces together to form a picture.

  Кусочки пазла (в данном случае аксиомы) не особо интересны сами по себе. Но картинка,
  которая из ни получается (в данном случае теорема), может быть очень крутой и информативной.
  Можно сказать, что доказательство, это набор инструкций, разъясняющих, как собрать кусочки вместе.
% ENG
%   The puzzle pieces (in this case, the axioms) aren't usually very interesting
%   on their own. However, the picture they form (in this case, the theorem) can
%   be really cool and enlightening. The proof would be analogous to an explicit
%   set of instructions explaining how to put the pieces together.
\end{itemize}

Once you are familiar with each of those concepts, we can do all sorts of cool
stuff.  Throughout the book, we will prove all of the following:

\begin{itemize}
\item If you tap your finger against a bridge at exactly the right frequency,
  the bridge will collapse. (Resonance)
\item The formula used to calculate the interest rate on your mortgage is
  actually just a fancy form of the ratios of angles in a triangle. (Euler's
  formula)
\item Logic can't be used to prove everything we know to be true. (Gödel's
  incompleteness theorem)
\end{itemize}

\s{Introduction (for real this time)}

This is a math book. Well, duh. Why did I write it?

Most math (and science) books nowadays seem to value keeping an academic tone
over ensuring that the reader understands the material, and --- more importantly
--- enjoys reading the book.

I take the opposite approach. I want to create a book that is fun to read and
easy to understand, while eschewing the practice of making myself look good.

The inspiration for this book is \href{http://learnyouahaskell.com/}{{\it Learn
    You a Haskell for Great Good!}, by Miran Lipovača}. Haskell is a programming
language, and LYAH is a great book for learning Haskell. If you are interested
in a print copy of LYAH, see \cite{lyah}.

\s{The community}

Despite the fact that I used ``I'' in the first part of the book, LYSA is
actually a community project, and many people participate in the writing of this
book.

If you want to talk to us, or to other math people, come see us in {\tt \#lysa}
on Freenode. If you don't know what IRC is, or you don't have a client set up,
you can connect through
\link{http://webchat.freenode.net/?channels=lysa}{Freenode's webchat}.

If you have any questions about LYSA (or math), feel free to ask in the IRC
channel ({\tt \#lysa} on FreeNode in case you forgot).

If you want to submit a correction, or have some issue, or want to add some
content, really anything having to do with the content of the book, you can
visit \link{https://gitlab.com/lysa/lysa}{our GitLab page}. We also have a
\link{https://lysa.reddit.com/}{community on Reddit}.

\s{Idris}\label{intro-idris}

In this book, we cover a lot of hard stuff.\footnote{This isn't actually
  true. Math isn't hard, stupid!} Sometimes, it's useful to program your way
through a problem. Every programmer will tell you that programming teaches a
manner of thinking.

Many programmers will cite Steve Jobs\footnote{For you youngsters, Steve Jobs is
  the former CEO of Apple. He's dead now.} famous quote, regarding the use of
programming in his job,

\begin{iquote}
  [sic] \ldots much more importantly, it had nothing to do with using [the
  programs we wrote] for anything practical. It had to do with using them to be
  a mirror of your thought process; to actually learn how to think. I think
  everybody in this country should learn how to program a computer --- should
  learn a computer language --- because it teaches you how to think.
\end{iquote}

\nocite{jobs-programming}

That first sentence or two is actually a pretty good description of mathematics
(and programming). Both are incredibly useful, and have endless practical
applications. That's not the point, though. The whole usefulness thing is a side
gig. It's about learning how to think, and having a rigorous language through
which to express your thoughts. Furthermore, the rigor of the language helps you
build upon your current thoughts to find out even cooler things. That's what
math is about.

Programming and math go hand-in-hand. Programmers and mathematicians will attest
to this; I certainly can. For that reason, throughout this book, there will be
coding exercises in the programming language Idris. Idris is an interesting
programming language for many reasons. The chief of which is that it can be used
to prove things mathematically. Most programming languages can't do this. Idris
can, which is why it is special.\footnote{There are other programming languages
  that can prove things, namely Coq and Agda. However, I'm most familiar with
  Idris, and Idris is probably the most useful, so I'm using Idris. Deal with
  it.}


\ss{Installing Idris}

This is something that is actually rather difficult to summarize, because it
varies from operating system to operating system. I will put down the
instructions for the operating systems I use. If you come upon this and don't
see your operating system, please report this on
\link{https://gitlab.com/lysa/lysa/issues/new}{the issue tracker}. Better yet,
you could add the instructions yourself, and ask me to merge your changes.

\sss{Linux}

\pg{Gentoo}

You will need the Haskell platform, along with the GNU Multiple Precision (GMP)
library. As of 5 January 2015, the Haskell platform is only available on
\code{\tilde ARCH}, where \code{ARCH} is your processor architecture
(e.g. \code{amd64}, \code{x86}). If you use \code{ARCH}, you can enable these by
adding the following to \filepath{/etc/portage/package.keywords}:\footnote{If
  you already use \code{\tilde ARCH}, you can ignore this}

\begin{plainfile}
dev-lang/ghc
dev-haskell/cabal-install
\end{plainfile}

Regardless of your \code{ACCEPT\_KEYWORDS} variable, you should add the
following to \filepath{/etc/portage/package.use}:

\begin{plainfile}
dev-lang/ghc binary
\end{plainfile}

Otherwise, you have to compile GHC (the Haskell compiler) from scratch, and that
takes forever.

Once you have that all out of the way, you'll want to run the following command as root:

\begin{shellsession}
# emerge -jav dev-lang/ghc dev-haskell/cabal-install
\end{shellsession}

\xtb{Warning}: \terminal{-j} will make the installation a lot faster, but is
more resource-intensive. If your power usage is precious, omit it (i.e. use
\terminal{-av} instead).

Once GHC and cabal-install are installed, you'll want to run the following as a
normal user:

\begin{shellsession}
% cabal update
% cabal install alex happy haddock hscolour
% cabal install idris
\end{shellsession}

You can then get at the Idris shell by running \terminal{idris}.

\s{Licensing}

This book is free, in the sense of freedom. You can copy this book and give it
to your friend. You can even print it out and sell it to your
friends.\footnote{There are some restrictions though, see \cref{gfdl}.}

If, for instance, you are a schoolteacher and want to use this for your class,
you are free to edit it to your liking and give the modified copy to your
students.

LYSA is licensed under the GNU Free Documentation License. \Cref{gfdl} contains
the license. Please read the license; it's actually pretty comprehensible.

The source for this book can be downloaded at
\url{https://gitlab.com/lysa/lysa/repository/archive.tar.gz}. If you are looking
to contribute, it's probably best to clone the git repository. You can clone the
git repository by running \terminal{git clone https://gitlab.com/lysa/lysa.git}
in a terminal.
